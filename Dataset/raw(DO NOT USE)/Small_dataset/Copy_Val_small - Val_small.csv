comments,Mention problems,Suggest solutions,Helpful,Token_num
"the last time, when i checked the deployed app on / / , the app was not working. however,it seems to be working fine now. the layout of the app is clean and simple and easy to follow. there was no confusion in navigating the app. however, it took quite some time to enter the address in proper format. same goes for the website and revenue while creating a company. you may put a sample address and phone number in the readme if you are strictly restricting the format. when applying for a job as a job-seeker, the error prompt for the portfolio format says that it should be of the form http(s)://www.website.com/org/etc however it only accepts the format http(s)://www.website.com. the same issue arised while creating a company while signed in as a recruiter. otherwise, the readme file is very detailed and helps the user to understand the working of the app very well. it could be a little brief or be displayed as bullet points instead of paragraphs to make it easier to read.&nbsp;",1,1,1,185
"the code for the most part follows good coding practices.the code is clearly written and is easy to understand for the most part.however, the use of comments especially for non-scaffold generated methods will help the user to understand the code much better. for eg:- filter function in the jobs controller. some of the empty-body methods can be written in a single line for eg:- ""show"" and ""edit"" method in users_controller. in the applications controller, there are parameters ""j_id"" and ""job_id"" which is slightly confusing. also, there are two controllers application_controller for authorization of users and applications_controller which handles crud methods for job applications. you could name it differently to avoid confusion. methods for destroying and closing an application have been defined in the model ""application.rb"" and similarly, in the job model file ""job.rb"" this negates the use of mvc architecture where the controller controls the interpretation of actions. &nbsp;",1,1,1,155
"the code is clear and easy to follow. however, it is pretty much the basic code generated by scaffold generation. in the authorize method of the application controller, the notice just says ""xyz"". this could be changed to a more specific message.the homepage controller has only two empty methods, create and new. this implies that its function is just to manipulate the views. i feel that this could be implemented in the user controller itself instead of creating a new controller for it.",1,1,1,84
"the admin model hasn't been tested at all. the configured email and password is not being authenticated.&nbsp; when the show button is clicked while viewing the company/job information , the recruiter is being able to edit the job &amp;/ company info even if not belonging to that company. furthermore, if a recruiter leaves a company, the jobs created by him/her are retained and can be edited/destroyed by the same recruiter which shouldn't happen according to the spec file. all these things should be take care of . you just have to put certain conditions in the appropriate views to display links to certain pages.",1,1,1,108
the models and controllers&nbsp;have not been tested properly. the code for testing the models and controllers is not present. the could also have developed the testing code.,1,1,1,29
"your code still follows good ruby and rails coding practices.&nbsp; your models/views/controller look good in terms of functionality, establishing relationships between classes, and your routing from page to page.&nbsp; i did notice some files that were blank as i was looking through your code.&nbsp; for example, a few controllers like welcome_controller.rb and homepages_controller.rb contains just the template and nothing else.&nbsp; in the future, you can individually make your own files in the terminal if you need just a model/view/controller (i.e. rails generate(or g) model model_name model_attributes).&nbsp; there's a scaffold i believe for models/views/controllers also if you prefer to use rubymine's way of generating code.",1,1,1,121
"very intuitive, the views are nice. the home page buttons could be space slightly better but there is nothing wrong with them. for a few forms (user sign up/create/update) if you try to put a password that is too short it crashes. update this so that instead it gives an error and tells the user what to change and to try again. on users there is also no validations for your phone number field. please update the color of text after the buttons have been clicked, its hard to read them. i really like the jobs in this company portion of the company show view, same for applications and jobs. the job seeker application process is a bit wonky, would add an apply button to job show and index.",1,1,1,131
"the user interface was slightly hard to use. in my opinion, there were too many clicks to get to applying for a job. by looking at the url in the browser (and in routes.rb), i see that you guys have -level nested resources. this may be a bad idea. i suggest looking at the following link for more information: https://medium.com/@jaredrayjohnson / -things-i-learned-toying-around-with-nested-resources-in-rails-fed d e &nbsp; furthermore, the readme.txt on github provided enough information for me to get started.",1,1,1,92
"the controllers' code is sometimes not dry. for example, the team specifically checks if the user is logged in with ""if !logged_in?"" in the companies_controller.rb&nbsp; &nbsp; instead of this, they can use a before_action in someplace thats more common for the flow of code (like the application_controller.rb). the code in the controllers also seems to ""play it safe"" when creating or editing things (they use new and save instead of functions like create! or save!). &nbsp; the team also did a decent job with the models. they look for validations and assign associations between the models. in the views, the ""code"" was simple enough to follow. the team did not fill the vies with ruby code too, which is good.",1,1,1,123
"yes, the team pushed a total of commits to&nbsp; master.&nbsp; on top of this, each team member contributed a decent share of the commits so this is good!&nbsp; this number of commits suggests solid group contribution.&nbsp; committing and pushing to github regularly is helpful for many reasons.&nbsp; one, it makes building a large, shared application much easier as everything can be built in little bite sized pieces.&nbsp; while it appears you all had no problem achieving this, one thing that might prove helpful in the future, is utilizing separate branches, and the issues section in github.&nbsp; using separate branches, allows each issue to be associated with a specific code branch off of master.&nbsp; this is useful, as when a pull request is made into master, the other team members are able to see exactly what that pull request contains.&nbsp; creating github issues is helpful in that it makes chopping up a large project into smaller, easier to understand tasks very simple.&nbsp; each issue can be assigned to different team members, and it helps everyone contribute an equal amount and work well together as a team.",1,1,1,195
"yes, the application has been deployed successfully.&nbsp; the user interface is clean, and though it is a little bland, it is easy to use.&nbsp; the readme is helpful when getting up and running with the application.&nbsp; it does a good job explaining how to login as an admin and such.&nbsp; one area i see for improvement still is in the readme layout and styling.&nbsp; github allows for the use of markup to style and edit readme and wiki documents on github.&nbsp; this is a great tool for creating tables, headers, and bullet points to help make documents more readable.&nbsp; if i were to give your team one suggestion moving forward with this section, it would be to give markup a try to help make the readme and other documentations more readable.&nbsp; here is a helpful resource regarding markup shortcuts, and how to use them!&nbsp;&nbsp;https://github.com/adam-p/markdown-here/wiki/markdown-cheatsheet",1,1,1,164
"pros: - no violations of ruby on rails coding practices. - proper naming conventions used. &nbsp; suggestions: - validations need to be added. (regex, empty values, etc.) - relationships should be defined clearly. (eg: has many, belongs to)",1,1,1,34
"&nbsp;the radio button on the bottom made it easy to switch between roles.&nbsp; an improvement could be recruiters being able to view job applications for a specific job.&nbsp; if they are viewing a job, they should be able to view its applications.&nbsp; it's ok as is in this system, but in a larger system with a lot of applications, a recruiter would want to be able to go from a job to its applications directly.",1,1,1,80
&nbsp;the readme could be made more clear with different sections for each user type,1,1,1,15
"it's pretty easy to navigate within the team's web application. they have drop-down lists whenever it's useful and appropriate, which makes it easier to choose, not typing. they also added&nbsp;a lot of&nbsp;additional instructions on their ui in readme, which could be a bit shorter.&nbsp;there is one suggestion i would give to the team&nbsp;that would probably improve the ui: -putting&nbsp;""home page"" and ""log out"" buttons in the upper right corner, which would&nbsp;make them more visually noticeable, and prevent an accidental log out case.&nbsp;",1,1,1,99
"the code looks great. the team followed &ldquo;good ruby and rails coding practices"". they use indentations and blank lines appropriately.&nbsp;just one&nbsp;suggestion: breaking some lines in your code into several would improve readability (line&nbsp; &nbsp;applications_controller.rb, ln in&nbsp;companies_controller.rb).",1,1,1,47
"i went through each file in test/models, and couldn&rsquo;t find any tests for any model.&nbsp; there are some tests in test/controllers folder though. some information on tests in readme would be helpful. one suggestion is to restrict some data types on data fields. like, revenue should be only integer, phone number should be max digits long, email addresses should follow conventions.",1,1,1,66
"in general, it is easy to navigate within the team's web application. i think it's&nbsp;good&nbsp;that they added some additional instructions on ui in readme.&nbsp;although, i'd like to give some suggestions that would probably improve the ui: adding ""home"" (for an easy jump to homepage) and ""log out"" buttons would be helpful on every page, maybe, in the upper right corner. keeping ""back"" button&nbsp;consistently at the same spot throughout the web app, maybe, even a little bit away from other buttons. adding drop-down lists for&nbsp;employment type,&nbsp;gender,&nbsp;race,&nbsp;veteran status,&nbsp;disability status. making 'additional information' for a job application optional. ",1,1,1,117
"the code looks good and ""dry"", and the team followed &ldquo;good ruby and rails coding practices"". however, i&rsquo;d give some suggestions: &nbsp; &nbsp; &nbsp;&nbsp;use indentations: for instance, when declaring &ldquo;private&rdquo; (applications_controller.rb, line ). it makes a declaration more visually noticeable. &nbsp; &nbsp; &nbsp;&nbsp;use blank lines between methods (applications_controller.rb), which improves readability. &nbsp; &nbsp;",1,1,1,63
"while this project excelled in all areas (best project i have reviewed), the documentation was its weakest part.&nbsp; the documentation wasn't bad (very good) but was a little hard to read/understand everything. specifically in the introduction of the problem.&nbsp; you go into detail of the task plan but i had a hard time understanding it all because the intro wasn't as strong.&nbsp; the youtube video helped fix this but i think both should stand alone.&nbsp;&nbsp;",1,1,1,83
"the code seems to be very well written.&nbsp; i like how you moved more code to the top of the file to avoid having to repeat code over and over for each test case (like you did in the first round).&nbsp; overall, very good job with the code.&nbsp;&nbsp;my only complaint is that you create these test , test , etc objects.&nbsp; if they were only used in a single test case it would be fine to name them that since i could discern what they were used for.&nbsp; however, since they are used in multiple test cases it is hard for me to determine why you use test rather than test (just an example).&nbsp; naming them with a more descriptive name could help with this.&nbsp;&nbsp;",1,1,1,133
"i understand perfectly what the goal of the project was. &nbsp; there's some awkwardness in the english, but nothing that's super important: &nbsp; ""the current functionality only allows for the author to review the bookmark, and the reviewer is not able to assess the usefulness of a bookmark."" has a random ""for"" in it and is a bit excessively wordy. -&gt; ""currently, only the author can review the bookmark, and the reviewer cannot assess the usefulness of a bookmark."" &nbsp; but that's picky and something that would be dealt with by the editor for a document, not the developers.",1,1,1,102
i had to search for the unity id of the student to locate the pull request. you might want to rename it to include the group number and name of the project. the&nbsp;coverage increased to . % some of the checks in the build were not successful. the test file has elaborately named tests which are indicative of its function and also which method they are testing.,1,1,1,67
"i was unable to verify the ui but the video and the screen captures show the working efficiently. more tests can be added. for eg- the first test only checks if a name for the menu is present. however, i feel checks should be made for the naming convention. this will help maintain uniformity throughout all projects.the team has checked if a menu name is nil. similarly, tests could be written to see if an invalid name is entered. also the test case . is just a slight extension of test case . . i wonder if an additional test is required for the same.",1,1,1,103
"in the&nbsp;app/helpers/response_report_helper.rb, the class summaryrevieweereport has many attributes contained in the class summaryreport. using inheritance would be a better option to keep the code dry.",1,1,1,30
"since it is&nbsp; a refactoring project, extensive code changes have been made. the team has posted snippets of all the changed code in the wiki. this has made the document unnecessarily lengthy without much information about the project or the refactoring itself. mostly, the code is repeated except for the addition of helpers. also, it would be more helpful to explain which sections of the test were already present and which sections were newly added. other than that, the team has explained the different aspects of the project very well.",1,1,1,91
most of the aspects are fine. the authors should include some code related to their functionality even if it is just the migrations.&nbsp;,1,1,1,24
"well as seen from comments on the pull request, the build has failed and also there are some conflicting files. also, code climate mentions few significant issues that needed to be fixed. i suppose that once all these issues are sorted out the code can be deployed on to the production because as far as the functionality is concerned the team has done commendable job. the current work is worthy enough to be considered as a starting point for future teams that are assigned this project.",1,1,1,86
"although there were not many problems with names selected, code climate reports few serious issues like function itemtemplate and method load_add_signup_topics exceed the allowed number of lines, few blocks have high number of lines, etc. the team should look at the suggestions provided by code climate for these issues and should fix these",1,1,1,53
there is one variable count in&nbsp;automatic_review_mapping&nbsp;which does not clearly indicate what it does even though the team has mentioned its significance in the wiki and in a comment in the code. one suggestion would be to change the name of this variable to something that is more suggestive of its functionality. rest of the naming convention seems quite reasonable and are suggestive of the proposed functionality.,1,1,1,70
as a few issues remain unresolved this code is not ready yet according to me. the functionality of the menu editor needs to be tested and after complete implementation should be deployed on the production server. but as the implemented functionality works fine this can be a good baseline for the future team to work upon and fix the remaining issues.&nbsp;,1,1,1,62
"no controller code has been altered by this team and hence i would not be able to accurately review this. the changes made only includes a migration which is done in a standard manner. however, there is an empty migration updatingbookmarksratingquestionaire which kind of adds redundancies.&nbsp; i would suggest to rollback this migartion.",1,1,1,54
"no the code is not really ready to be deployed. only one of the three issues have been fixed. even though the build passes, there are some code climate issues which needs to be looked at. unfortunately , this team faced a lot of problems with their interactive menu javascript. firstly, these issues needs to be resolved. secondly , since no tests are included, the newly added features should be thoroughly tested before deployment. i believe the project should not be completely scrapped. rather , the issues with it needs to be fixed and the future team can use this work as a reference.",1,1,1,101
"no test plan was included. no form of testing have been performed by the team. as some of the functionality mentioned in the problem statement is incomplete, i would suggest writing thorough tests beforehand and writing the functions till the tests passed. once the said functionality is included, the code can be refactored to make it dry. &nbsp; these test cases will formulate your test plan and thus increase the coverage.",1,1,1,71
the writeup is very descriptive. it clearly defines the problem statement and proposed solutions of the author. the karma points system designed by the author is pretty impressive. the instructions for ui testing are illustrated in details and thus are easy to understand.the authors have also proposed solutions for unimplemented problems which is impressive. they were unable to do it due to some other javascript error which is not really their fault. one suggestion i had was to include the db files or the new migrations created in the wiki for the reader to understand. this would have enabled the reader to understand how the previous migrations were faulty and how it was changed.&nbsp; plus the functionality of the new migration would be clear. at least the names of all the migrations altered or created should have been included. &nbsp;,1,1,1,142
"the wiki is properly documented. the problems are explained in detail along with the proposed solution. the unimplemented functionality is mentioned which is neat and helps the reviewer in accessing. the result are depicted in the form of screenshots displaying the implemented functionality. this part is done well. however, i think the wiki could have been enhanced if some code snippets were including showing the previous code with faulty migrations and the corrected one. this would enhance the overall understanding. the proposed model with karma points is impressive.",1,1,1,88
no writeup provided by the author. please provide the writeup for the next submission.,1,1,1,14
the authors have given a brief introduction to their project. they mention that they are required to add rspec for&nbsp;collusion_cycle.rb&nbsp;model. they can add a brief introduction to tdd process and a wikipedia link can be provided. other than that the document is well written.,1,1,1,49
the build passed travisci&nbsp;but did not pass the code climate check. the authors need to fix these issues to make up to the coding standards of the repository.,1,1,1,30
the authors have not provided any screencast of the testing they have performed. they have also not created any pull request (not mentioned anywhere). they authors must add a screencast of their work if they do not deploy their application so that reviewers can see their work.,1,1,1,47
the functions are adequate in size and cannot be extracted in a separate methods. it would have been helpful if more comments were given on the test cases. the code fillows good ruby and rails practices.,1,1,1,36
"the build passed in travis ci. the codeclimate issues still exist and they could be taken care of, moreover i feel the code could have been dried up more by removing repeated let statements.",1,1,1,34
"the code is well written but could have been dried up more, there are some repeated declarations in the let(..) statements of rspec that could have pushed up in their before(:each)&nbsp;",1,1,1,33
"as the pull request is not visible i cannot comment on the the coverage of these test cases, moreover their are a few places in the code that could be dried up, otherwise the test cases seem to pass and it seems that they cover a lot of scenarios. all in all, by doing a coverage test if the coverage is above % then i feel that the code could be deployed on the production server.",1,1,1,75
" i do not think that they have any of the functions which are too long. they have followed a pretty neat style of coding as said earlier, the code does look good however, i see there is some cleaning up left to do (file ex: github_data_cotroller.rb, lines: +) i worked on a mozilla project, so i did not have a chance to work on any part of the code of expertiza. overall, they seem to have followed good modularity. however, as i mentioned earlier, for better practices and for making reviewer's life easier, a brief description for a not-too short function could help. the code does seem to follow the ruby style guidelines very well. they have defined actions in the controller which is a good practice. ",1,1,1,129
"the write up was certainly well structured and covered the basic sections (why they are doing it, what needs to be improved, how they plan to improve it). not that this is something mandatory, but something i would like (as a person who is reviewing) is, i would also put up a side by side comparison of how their information would be different from the previous work. they have done their part of the job by adding link to previous work. i did try to skim through the link, however this is not your part, it was a long read and i had to figure out what was going on just by looking at the figures. apart from this, good work on explaining your project.",1,1,1,125
"there are gem related updates in the gemfile which majorly seem to be for a newer version of gems. but this is not the primary concern of the question. apart from that, i reviewed&nbsp;github_data_controller.rb&nbsp;file. the actions defined in this file seem to have understandable names (assignment, assignment_team). however, a brief description about a function (action_allowed?) would have made my job a little easier and code would follow a better practice ofcourse. was able to understand what this meant (possibly for checking if it is a pull request?) github_pull_regex = %r(https?:\/\/(?:[w]{ }\.)?github\.com\/([a-z - _\-]+)\/([a-z - _\-]+)\/pull\/([ - ]+)[\s]*)i a comment would have been helpful here. overall the naming conventions do not seem to be a problem, however, i would add some more comments describing briefly what each action in the controller intends/expects to do.",1,1,1,144
"the team has provided the screenshot of their working code's output, which is great! however, i have not worked on expertiza project and i do not have idea of how to build and test their code. i am not sure if they were supposed to deploy it. but a screencast of their demo would have been a lot better to understand their work. i would create a small screen cast explaining briefly the aim of the project and show a demo of your work.",1,1,1,85
"they seem to have done a really good job at refactoring blobs of code and breaking them into meaningful modules and also stating what, where, why and how they did that. even though they have done a good job at breaking down the code, i would add comments on functions to make code better and easier to understand for a rd person.",1,1,1,62
"i would recommend trying to build your factories rather than creating them.&nbsp; the difference between building and creating is that if you build an object, it won't be saved in the database while creating does save it to the database.&nbsp; the goal of testing is to create objects that you can use for testing purposes, so you shouldn't need to save them in the database.&nbsp; if you do want to do that, i would recommend cleaning your database with a gem called databasecleaner.&nbsp; also, you don't need to re-introduce factory builds if you are already doing them outside of your tests.&nbsp; you can remove those and your tests should run fine.",1,1,1,120
the user interface is very easy to use and attractive. the interface displays all the required information and links so that the user can easily access the application.,-1,-1,-1,28
"the code follows ruby and rails best practices to the best extent possible. most of the code is generated by scaffold so follows the systematic hierarchy of the scaffold. the authors have also put comments wherever necessary, which is helpful. the code is also properly indented as per ruby standards.",-1,-1,-1,50
the team kept on pushing their changes throughout the project period. the number of commits is also good that is which is clear indication that the team is working on the project throughout the project period.,-1,-1,-1,36
"the team seems to have started on the project early enough. the first commit was about days ago, and the most recent commit was days ago. throughout this period, most of the commits seemed to have enough change to the app to be notable.",-1,-1,-1,44
"yes, the code is very properly maintained with using suitable dependencies in database and proper test modules for every task in models, views and controllers&nbsp;",-1,-1,-1,26
"the ui is very user friendly and intuitive. navigation through the pages is effortless and very much sticks to the norms of what is considered an intuitive ui. there is hardly any need to go through the readme to understand what the system does as it is very obvious. also, the readme, although not required to understand how to go about interacting with the system, is very descriptive and covers all the aspects of the system.",-1,-1,-1,76
there were lots of commits! the commits seemed to only fix one thing and one thing alone.&nbsp; it is very easy to read through them and see what exactly changed (from the description).&nbsp; good job committing small changes rather than lumping them together like most group have done.&nbsp;&nbsp;,-1,-1,-1,52
"the team completed all test cases and increased the coverage to %. based on the coverage being brought up to %, documentation, and youtube video, it seems that you have covered everything you were supposed to.&nbsp;&nbsp;",-1,-1,-1,36
"the youtube video clearly explains the test cases and shows that they all pass.&nbsp; additionally, it shows that the coverage is at % (clear proof).&nbsp; i really liked how you explained your test cases in the youtube video.&nbsp; it made it much easier to understand.&nbsp;&nbsp;",-1,-1,-1,49
write up was explanatory and made it easy to understand the test cases. extensively written and a lot of extra background information was also there indicating effort and supplying context for the reviewer.,-1,-1,-1,33
the spec file has been written well and overall seems to follow good coding practices. all the tests are short and the name of the test indicates its functionality,-1,-1,-1,29
"the coverage has increased. in the last review, due to lack of test cases, one of the controller was not achieving full coverage but it is now. the newly added code has taken the total coverage to . %. the response_report and review_mapping controllers have all the tests pass.",-1,-1,-1,47
"yes, the code is ready to be deployed as it works as expected. the refactoring, which was the goal of the project has been done very well and is achieving good coverage.",-1,-1,-1,32
the writeup explains the reasons for the aspects the authors changed or introduced in their project. they have used the factory design pattern and the implementation is correct and adheres the principle of this design pattern.,-1,-1,-1,36
"the variables, methods and class names which the authors have used are self-explanatory. the authors have defined helpers which reduces the length of individual methods. this is a good refactoring practice.",-1,-1,-1,32
the write-up is concise. the project has been explained in details with comparison between the existing and the new code. the ui has been explained so as to see the functionality.,-1,-1,-1,32
the code is well written and comments have been added for understanding the code. the refactoring has significantly reduced the length of the existing code.,-1,-1,-1,25
yes the team has added new test cases and the pull request shows that there has been a . % increase in the coverage. the newly added tests seem to cover&nbsp;almost every aspect&nbsp;of the project.,-1,-1,-1,37
yes the writeup clearly explains how and why the authors have did the work they did. the team was supposed to use factory design pattern to refactor response_report method and the implementations for the same seems to be correct to the best of my knowledge for the same.,-1,-1,-1,48
there were not many problems with the writeup in the first round of the review and the team has added some content to the writeup which describes the newly made changes to the project. overall the writeup is well written.,-1,-1,-1,40
"the emphasis of the project was refactoring two methods and looking at the work done by the team it is clearly visible that the size of the methods which were to be refactored has significantly reduced, thereby proving that the team has done a good job. as far as a naming problem regarding a variable ""count "" that was suggested in the first round of the review has been successfully fixed by the team.",-1,-1,-1,73
the code has not been deployed but the team has included a screencast and screenshots of the test passing which is evident that the intended functionality works.,-1,-1,-1,27
the writeup is quite descriptive and contains clear explanation of the issues. it also contains proposed solutions for the problems that are unsolved. it conatins instructions for ui testing making it easier for manual testing.&nbsp;,-1,-1,-1,36
the team has added extensive test cases for the scenarios required in the project. the code coverage has increased by . % as seen in the pull request (coveralls). this is a good indicator that the tests are actually helpful in these cases.,-1,-1,-1,41
"the test plan in explained in great detail. the authors have mentioned all the tests they are performing on the model. multiple cases are written for each function. they have also used diagrams to explain the various use cases, which is a plus point.",-1,-1,-1,44
the authors have done a great job explaining the tests they need to do and the test cases corresponding to the same. they have mentioned the test plan with detailed diagrams. they have written test cases for the various functions in the model.,-1,-1,-1,43
the authors have provided a screencast of their project. they describe the various aspects of the tests in the screencast. the tests seem to pass in the screencast. the tests are extensively written and seem to cover all scenarios.,-1,-1,-1,39
the test plan in explained in great detail. the authors have mentioned all the tests they are performing on the model. multiple cases are written for each function.,-1,-1,-1,28
the authors have done a good job with the write-up in expertiza wiki. all the relevant sections are present in the writeup. also the sections are detailed in explaining the tests.,-1,-1,-1,32
i feel that the code is ready to be deployed as the test cases seem complete and the team has approached the problem correctly.&nbsp;,-1,-1,-1,25
the writeup has also improved a lot and they have explained cases with diagrams and have done a really good job of explaining the functionality of their project.,-1,-1,-1,28
"the code seems to cover a lot of cases, cases such as when reviews are null have also been included and scenarios where node count varies is also taken under consideration.",-1,-1,-1,31
"it seems like the code does the work it is intended to perform, the project was split into two parts and they seem to work well.",-1,-1,-1,26
the authors have done well with the writeup. they have done a good job of explaining the test scenarios and also have uploaded a screen cast which makes it easy for a reviewer to review their work.,-1,-1,-1,37
the write up explains everything that the projects needs to work on. they have mentioned the design pattern they used and why. i don't think anything is missing from the wiki. section,-1,-1,-1,33
all tests are passed as per the screenshot provided in the wiki page. they have used rpec for testing which is good. i do not see any areas for suggestion here.,-1,-1,-1,31
"as far as this project is concerned, since this was a refactoring project, i can see that they have refactored it properly and tested the code using rspec which shows that all tests have been passed which is good. i did not work on expertiza and i have not myself performed a test to see if this works.&nbsp;",-1,-1,-1,59
the wiki page is pretty clear as to what the project aims to achieve. what i really liked about the wiki page is that they have snapshots of what the previous worked looked like and how it looks after they improved it. this is really impressive as this gives a very clear and fast understanding of what you have worked on. they have also listed out the files that they edited which is really good. they have also explained what review mapping controller is which helped me get an idea of basic functionalities of the code.,-1,-1,-1,96
"the write-up shows what needed to be done, what was done, and the results of doing it.&nbsp; this is a clear and concise approach to the project.",-1,-1,-1,29
the video was very helpful. the operation of this is very well explained and ui does exactly what it should(since you know what to expect because you watched the video),-1,-1,-1,31
the team has made good commits for the nd round which indicates the team has been actively working on improving the project. there were commits for the second submission.&nbsp;&nbsp;,-1,-1,-1,31
the team added the test cases. this increased the coverage of the project. and also the test cases added cover the range of the project.,-1,-1,-1,25
the team has made good efforts to test nearly % test cases and some additional test cases can make this code ready to be deployed onto the production server. the code was well written and tested hence some additional testing could make the project deployable.,-1,-1,-1,44
"the write-up was well written and described the intent of the project. the write-up was detailed enough to easily understand and test the project. the team made a good effort in write-up. the write-up clearly explained the type of tests written and their purpose. the authors explained all tests like four node cycle, three node cycle etc.",-1,-1,-1,61
the team has made good effort in making the write up easy to understand. the primary purpose of the project is clearly displayed in the write-up. the write-up also included screenshots of the project which made it more easy to understand the project. the write up was detailed enough to understand the functionality implemented in the project.,-1,-1,-1,59
"yes, the writeup&nbsp;includes both problems and how they are gonna solve the problems. what's more? they include the files changed by them which is easy for a reader to look into it if they only got the codes instead of github&nbsp;pull request content.",-1,-1,-1,48
"since march th, there are a significant number of commits made on the day of the due date.&nbsp; good job having each member contribute to these new commits rather than one person committing all the changes!&nbsp; new code was added, mainly new tests and stubs in order to increase their code coverage.",-1,-1,-1,54
"the write up seems well written.&nbsp; it's easy to follow, it provides all the necessary details from what the problem is for this project, what menu items are like between an instructor and student, and&nbsp;what the testing conditions are for each test in the menu_item_spec.rb file.&nbsp; while i did not review this for the first round, i think improvements have been made accordingly.&nbsp; great job!",-1,-1,-1,72
"the project should be deployed since there were no testing done before, and some of the scenarios are pretty important which the team has covered. all the tests seem to work as they should, as well as all of them pass. it has a coverage of %.",-1,-1,-1,46
"&nbsp; participant , , , were good variable names when you were later comparing them with response , ,etc you used good names for the context using the names of the method which are going to be tested.",-1,-1,-1,34
the writing is very well detailed as well as i liked that they have snipits of their code added in it as well as pictures to describe the process. it was helpful that they explained what each method did.,-1,-1,-1,39
its is not dry used let to reuse code as well as before(:each) statements.&nbsp; the code improved as well as new code has been added to test more scenarios.,-1,-1,-1,31